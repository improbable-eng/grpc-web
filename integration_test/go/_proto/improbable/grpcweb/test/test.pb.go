// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.2
// source: improbable/grpcweb/test/test.proto

package test

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PingRequest_FailureType int32

const (
	PingRequest_NONE         PingRequest_FailureType = 0
	PingRequest_CODE         PingRequest_FailureType = 1
	PingRequest_CODE_UNICODE PingRequest_FailureType = 3
)

// Enum value maps for PingRequest_FailureType.
var (
	PingRequest_FailureType_name = map[int32]string{
		0: "NONE",
		1: "CODE",
		3: "CODE_UNICODE",
	}
	PingRequest_FailureType_value = map[string]int32{
		"NONE":         0,
		"CODE":         1,
		"CODE_UNICODE": 3,
	}
)

func (x PingRequest_FailureType) Enum() *PingRequest_FailureType {
	p := new(PingRequest_FailureType)
	*p = x
	return p
}

func (x PingRequest_FailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PingRequest_FailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_improbable_grpcweb_test_test_proto_enumTypes[0].Descriptor()
}

func (PingRequest_FailureType) Type() protoreflect.EnumType {
	return &file_improbable_grpcweb_test_test_proto_enumTypes[0]
}

func (x PingRequest_FailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PingRequest_FailureType.Descriptor instead.
func (PingRequest_FailureType) EnumDescriptor() ([]byte, []int) {
	return file_improbable_grpcweb_test_test_proto_rawDescGZIP(), []int{0, 0}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value             string                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ResponseCount     int32                   `protobuf:"varint,2,opt,name=response_count,json=responseCount,proto3" json:"response_count,omitempty"`
	ErrorCodeReturned uint32                  `protobuf:"varint,3,opt,name=error_code_returned,json=errorCodeReturned,proto3" json:"error_code_returned,omitempty"`
	FailureType       PingRequest_FailureType `protobuf:"varint,4,opt,name=failure_type,json=failureType,proto3,enum=improbable.grpcweb.test.PingRequest_FailureType" json:"failure_type,omitempty"`
	CheckMetadata     bool                    `protobuf:"varint,5,opt,name=check_metadata,json=checkMetadata,proto3" json:"check_metadata,omitempty"`
	SendHeaders       bool                    `protobuf:"varint,6,opt,name=send_headers,json=sendHeaders,proto3" json:"send_headers,omitempty"`
	SendTrailers      bool                    `protobuf:"varint,7,opt,name=send_trailers,json=sendTrailers,proto3" json:"send_trailers,omitempty"`
	StreamIdentifier  string                  `protobuf:"bytes,8,opt,name=stream_identifier,json=streamIdentifier,proto3" json:"stream_identifier,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_improbable_grpcweb_test_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_improbable_grpcweb_test_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_improbable_grpcweb_test_test_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PingRequest) GetResponseCount() int32 {
	if x != nil {
		return x.ResponseCount
	}
	return 0
}

func (x *PingRequest) GetErrorCodeReturned() uint32 {
	if x != nil {
		return x.ErrorCodeReturned
	}
	return 0
}

func (x *PingRequest) GetFailureType() PingRequest_FailureType {
	if x != nil {
		return x.FailureType
	}
	return PingRequest_NONE
}

func (x *PingRequest) GetCheckMetadata() bool {
	if x != nil {
		return x.CheckMetadata
	}
	return false
}

func (x *PingRequest) GetSendHeaders() bool {
	if x != nil {
		return x.SendHeaders
	}
	return false
}

func (x *PingRequest) GetSendTrailers() bool {
	if x != nil {
		return x.SendTrailers
	}
	return false
}

func (x *PingRequest) GetStreamIdentifier() string {
	if x != nil {
		return x.StreamIdentifier
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Counter int32  `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_improbable_grpcweb_test_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_improbable_grpcweb_test_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_improbable_grpcweb_test_test_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PingResponse) GetCounter() int32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type TextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	SendHeaders  bool   `protobuf:"varint,2,opt,name=send_headers,json=sendHeaders,proto3" json:"send_headers,omitempty"`
	SendTrailers bool   `protobuf:"varint,3,opt,name=send_trailers,json=sendTrailers,proto3" json:"send_trailers,omitempty"`
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_improbable_grpcweb_test_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_improbable_grpcweb_test_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_improbable_grpcweb_test_test_proto_rawDescGZIP(), []int{2}
}

func (x *TextMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextMessage) GetSendHeaders() bool {
	if x != nil {
		return x.SendHeaders
	}
	return false
}

func (x *TextMessage) GetSendTrailers() bool {
	if x != nil {
		return x.SendTrailers
	}
	return false
}

type ContinueStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdentifier string `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3" json:"stream_identifier,omitempty"`
}

func (x *ContinueStreamRequest) Reset() {
	*x = ContinueStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_improbable_grpcweb_test_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueStreamRequest) ProtoMessage() {}

func (x *ContinueStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_improbable_grpcweb_test_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueStreamRequest.ProtoReflect.Descriptor instead.
func (*ContinueStreamRequest) Descriptor() ([]byte, []int) {
	return file_improbable_grpcweb_test_test_proto_rawDescGZIP(), []int{3}
}

func (x *ContinueStreamRequest) GetStreamIdentifier() string {
	if x != nil {
		return x.StreamIdentifier
	}
	return ""
}

type CheckStreamClosedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdentifier string `protobuf:"bytes,1,opt,name=stream_identifier,json=streamIdentifier,proto3" json:"stream_identifier,omitempty"`
}

func (x *CheckStreamClosedRequest) Reset() {
	*x = CheckStreamClosedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_improbable_grpcweb_test_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStreamClosedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStreamClosedRequest) ProtoMessage() {}

func (x *CheckStreamClosedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_improbable_grpcweb_test_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStreamClosedRequest.ProtoReflect.Descriptor instead.
func (*CheckStreamClosedRequest) Descriptor() ([]byte, []int) {
	return file_improbable_grpcweb_test_test_proto_rawDescGZIP(), []int{4}
}

func (x *CheckStreamClosedRequest) GetStreamIdentifier() string {
	if x != nil {
		return x.StreamIdentifier
	}
	return ""
}

type CheckStreamClosedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Closed bool `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
}

func (x *CheckStreamClosedResponse) Reset() {
	*x = CheckStreamClosedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_improbable_grpcweb_test_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStreamClosedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStreamClosedResponse) ProtoMessage() {}

func (x *CheckStreamClosedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_improbable_grpcweb_test_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStreamClosedResponse.ProtoReflect.Descriptor instead.
func (*CheckStreamClosedResponse) Descriptor() ([]byte, []int) {
	return file_improbable_grpcweb_test_test_proto_rawDescGZIP(), []int{5}
}

func (x *CheckStreamClosedResponse) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

var File_improbable_grpcweb_test_test_proto protoreflect.FileDescriptor

var file_improbable_grpcweb_test_test_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x77, 0x65, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x03, 0x0a, 0x0b, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77,
	0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x22, 0x04, 0x08,
	0x02, 0x10, 0x02, 0x22, 0x3e, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65,
	0x6e, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x44,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x33, 0x0a,
	0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x32, 0xf4, 0x04, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x61, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x42, 0x69, 0x64,
	0x69, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x54, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x24, 0x2e, 0x69, 0x6d,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xeb, 0x01, 0x0a, 0x0f, 0x54, 0x65,
	0x73, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x2e, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x11, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x31,
	0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x6b, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6d,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x19, 0x5a, 0x17, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x6c, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_improbable_grpcweb_test_test_proto_rawDescOnce sync.Once
	file_improbable_grpcweb_test_test_proto_rawDescData = file_improbable_grpcweb_test_test_proto_rawDesc
)

func file_improbable_grpcweb_test_test_proto_rawDescGZIP() []byte {
	file_improbable_grpcweb_test_test_proto_rawDescOnce.Do(func() {
		file_improbable_grpcweb_test_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_improbable_grpcweb_test_test_proto_rawDescData)
	})
	return file_improbable_grpcweb_test_test_proto_rawDescData
}

var file_improbable_grpcweb_test_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_improbable_grpcweb_test_test_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_improbable_grpcweb_test_test_proto_goTypes = []interface{}{
	(PingRequest_FailureType)(0),      // 0: improbable.grpcweb.test.PingRequest.FailureType
	(*PingRequest)(nil),               // 1: improbable.grpcweb.test.PingRequest
	(*PingResponse)(nil),              // 2: improbable.grpcweb.test.PingResponse
	(*TextMessage)(nil),               // 3: improbable.grpcweb.test.TextMessage
	(*ContinueStreamRequest)(nil),     // 4: improbable.grpcweb.test.ContinueStreamRequest
	(*CheckStreamClosedRequest)(nil),  // 5: improbable.grpcweb.test.CheckStreamClosedRequest
	(*CheckStreamClosedResponse)(nil), // 6: improbable.grpcweb.test.CheckStreamClosedResponse
	(*emptypb.Empty)(nil),             // 7: google.protobuf.Empty
}
var file_improbable_grpcweb_test_test_proto_depIdxs = []int32{
	0,  // 0: improbable.grpcweb.test.PingRequest.failure_type:type_name -> improbable.grpcweb.test.PingRequest.FailureType
	7,  // 1: improbable.grpcweb.test.TestService.PingEmpty:input_type -> google.protobuf.Empty
	1,  // 2: improbable.grpcweb.test.TestService.Ping:input_type -> improbable.grpcweb.test.PingRequest
	1,  // 3: improbable.grpcweb.test.TestService.PingError:input_type -> improbable.grpcweb.test.PingRequest
	1,  // 4: improbable.grpcweb.test.TestService.PingList:input_type -> improbable.grpcweb.test.PingRequest
	1,  // 5: improbable.grpcweb.test.TestService.PingPongBidi:input_type -> improbable.grpcweb.test.PingRequest
	1,  // 6: improbable.grpcweb.test.TestService.PingStream:input_type -> improbable.grpcweb.test.PingRequest
	3,  // 7: improbable.grpcweb.test.TestService.Echo:input_type -> improbable.grpcweb.test.TextMessage
	4,  // 8: improbable.grpcweb.test.TestUtilService.ContinueStream:input_type -> improbable.grpcweb.test.ContinueStreamRequest
	5,  // 9: improbable.grpcweb.test.TestUtilService.CheckStreamClosed:input_type -> improbable.grpcweb.test.CheckStreamClosedRequest
	1,  // 10: improbable.grpcweb.test.FailService.NonExistant:input_type -> improbable.grpcweb.test.PingRequest
	2,  // 11: improbable.grpcweb.test.TestService.PingEmpty:output_type -> improbable.grpcweb.test.PingResponse
	2,  // 12: improbable.grpcweb.test.TestService.Ping:output_type -> improbable.grpcweb.test.PingResponse
	7,  // 13: improbable.grpcweb.test.TestService.PingError:output_type -> google.protobuf.Empty
	2,  // 14: improbable.grpcweb.test.TestService.PingList:output_type -> improbable.grpcweb.test.PingResponse
	2,  // 15: improbable.grpcweb.test.TestService.PingPongBidi:output_type -> improbable.grpcweb.test.PingResponse
	2,  // 16: improbable.grpcweb.test.TestService.PingStream:output_type -> improbable.grpcweb.test.PingResponse
	3,  // 17: improbable.grpcweb.test.TestService.Echo:output_type -> improbable.grpcweb.test.TextMessage
	7,  // 18: improbable.grpcweb.test.TestUtilService.ContinueStream:output_type -> google.protobuf.Empty
	6,  // 19: improbable.grpcweb.test.TestUtilService.CheckStreamClosed:output_type -> improbable.grpcweb.test.CheckStreamClosedResponse
	2,  // 20: improbable.grpcweb.test.FailService.NonExistant:output_type -> improbable.grpcweb.test.PingResponse
	11, // [11:21] is the sub-list for method output_type
	1,  // [1:11] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_improbable_grpcweb_test_test_proto_init() }
func file_improbable_grpcweb_test_test_proto_init() {
	if File_improbable_grpcweb_test_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_improbable_grpcweb_test_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_improbable_grpcweb_test_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_improbable_grpcweb_test_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_improbable_grpcweb_test_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_improbable_grpcweb_test_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStreamClosedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_improbable_grpcweb_test_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStreamClosedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_improbable_grpcweb_test_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_improbable_grpcweb_test_test_proto_goTypes,
		DependencyIndexes: file_improbable_grpcweb_test_test_proto_depIdxs,
		EnumInfos:         file_improbable_grpcweb_test_test_proto_enumTypes,
		MessageInfos:      file_improbable_grpcweb_test_test_proto_msgTypes,
	}.Build()
	File_improbable_grpcweb_test_test_proto = out.File
	file_improbable_grpcweb_test_test_proto_rawDesc = nil
	file_improbable_grpcweb_test_test_proto_goTypes = nil
	file_improbable_grpcweb_test_test_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	PingEmpty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PingError(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PingList(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (TestService_PingListClient, error)
	PingPongBidi(ctx context.Context, opts ...grpc.CallOption) (TestService_PingPongBidiClient, error)
	PingStream(ctx context.Context, opts ...grpc.CallOption) (TestService_PingStreamClient, error)
	Echo(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) PingEmpty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/improbable.grpcweb.test.TestService/PingEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/improbable.grpcweb.test.TestService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) PingError(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/improbable.grpcweb.test.TestService/PingError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) PingList(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (TestService_PingListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[0], "/improbable.grpcweb.test.TestService/PingList", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_PingListClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingListClient struct {
	grpc.ClientStream
}

func (x *testServicePingListClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) PingPongBidi(ctx context.Context, opts ...grpc.CallOption) (TestService_PingPongBidiClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[1], "/improbable.grpcweb.test.TestService/PingPongBidi", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingPongBidiClient{stream}
	return x, nil
}

type TestService_PingPongBidiClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingPongBidiClient struct {
	grpc.ClientStream
}

func (x *testServicePingPongBidiClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePingPongBidiClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) PingStream(ctx context.Context, opts ...grpc.CallOption) (TestService_PingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[2], "/improbable.grpcweb.test.TestService/PingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingStreamClient{stream}
	return x, nil
}

type TestService_PingStreamClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingStreamClient struct {
	grpc.ClientStream
}

func (x *testServicePingStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePingStreamClient) CloseAndRecv() (*PingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) Echo(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error) {
	out := new(TextMessage)
	err := c.cc.Invoke(ctx, "/improbable.grpcweb.test.TestService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	PingEmpty(context.Context, *emptypb.Empty) (*PingResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PingError(context.Context, *PingRequest) (*emptypb.Empty, error)
	PingList(*PingRequest, TestService_PingListServer) error
	PingPongBidi(TestService_PingPongBidiServer) error
	PingStream(TestService_PingStreamServer) error
	Echo(context.Context, *TextMessage) (*TextMessage, error)
}

// UnimplementedTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (*UnimplementedTestServiceServer) PingEmpty(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingEmpty not implemented")
}
func (*UnimplementedTestServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTestServiceServer) PingError(context.Context, *PingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingError not implemented")
}
func (*UnimplementedTestServiceServer) PingList(*PingRequest, TestService_PingListServer) error {
	return status.Errorf(codes.Unimplemented, "method PingList not implemented")
}
func (*UnimplementedTestServiceServer) PingPongBidi(TestService_PingPongBidiServer) error {
	return status.Errorf(codes.Unimplemented, "method PingPongBidi not implemented")
}
func (*UnimplementedTestServiceServer) PingStream(TestService_PingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingStream not implemented")
}
func (*UnimplementedTestServiceServer) Echo(context.Context, *TextMessage) (*TextMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_PingEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).PingEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.grpcweb.test.TestService/PingEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).PingEmpty(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.grpcweb.test.TestService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_PingError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).PingError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.grpcweb.test.TestService/PingError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).PingError(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_PingList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).PingList(m, &testServicePingListServer{stream})
}

type TestService_PingListServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type testServicePingListServer struct {
	grpc.ServerStream
}

func (x *testServicePingListServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_PingPongBidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PingPongBidi(&testServicePingPongBidiServer{stream})
}

type TestService_PingPongBidiServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type testServicePingPongBidiServer struct {
	grpc.ServerStream
}

func (x *testServicePingPongBidiServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePingPongBidiServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_PingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PingStream(&testServicePingStreamServer{stream})
}

type TestService_PingStreamServer interface {
	SendAndClose(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type testServicePingStreamServer struct {
	grpc.ServerStream
}

func (x *testServicePingStreamServer) SendAndClose(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePingStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.grpcweb.test.TestService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Echo(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.grpcweb.test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingEmpty",
			Handler:    _TestService_PingEmpty_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TestService_Ping_Handler,
		},
		{
			MethodName: "PingError",
			Handler:    _TestService_PingError_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _TestService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingList",
			Handler:       _TestService_PingList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingPongBidi",
			Handler:       _TestService_PingPongBidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PingStream",
			Handler:       _TestService_PingStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "improbable/grpcweb/test/test.proto",
}

// TestUtilServiceClient is the client API for TestUtilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestUtilServiceClient interface {
	ContinueStream(ctx context.Context, in *ContinueStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckStreamClosed(ctx context.Context, in *CheckStreamClosedRequest, opts ...grpc.CallOption) (*CheckStreamClosedResponse, error)
}

type testUtilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestUtilServiceClient(cc grpc.ClientConnInterface) TestUtilServiceClient {
	return &testUtilServiceClient{cc}
}

func (c *testUtilServiceClient) ContinueStream(ctx context.Context, in *ContinueStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/improbable.grpcweb.test.TestUtilService/ContinueStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testUtilServiceClient) CheckStreamClosed(ctx context.Context, in *CheckStreamClosedRequest, opts ...grpc.CallOption) (*CheckStreamClosedResponse, error) {
	out := new(CheckStreamClosedResponse)
	err := c.cc.Invoke(ctx, "/improbable.grpcweb.test.TestUtilService/CheckStreamClosed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestUtilServiceServer is the server API for TestUtilService service.
type TestUtilServiceServer interface {
	ContinueStream(context.Context, *ContinueStreamRequest) (*emptypb.Empty, error)
	CheckStreamClosed(context.Context, *CheckStreamClosedRequest) (*CheckStreamClosedResponse, error)
}

// UnimplementedTestUtilServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestUtilServiceServer struct {
}

func (*UnimplementedTestUtilServiceServer) ContinueStream(context.Context, *ContinueStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueStream not implemented")
}
func (*UnimplementedTestUtilServiceServer) CheckStreamClosed(context.Context, *CheckStreamClosedRequest) (*CheckStreamClosedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStreamClosed not implemented")
}

func RegisterTestUtilServiceServer(s *grpc.Server, srv TestUtilServiceServer) {
	s.RegisterService(&_TestUtilService_serviceDesc, srv)
}

func _TestUtilService_ContinueStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestUtilServiceServer).ContinueStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.grpcweb.test.TestUtilService/ContinueStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestUtilServiceServer).ContinueStream(ctx, req.(*ContinueStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestUtilService_CheckStreamClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStreamClosedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestUtilServiceServer).CheckStreamClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.grpcweb.test.TestUtilService/CheckStreamClosed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestUtilServiceServer).CheckStreamClosed(ctx, req.(*CheckStreamClosedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestUtilService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.grpcweb.test.TestUtilService",
	HandlerType: (*TestUtilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContinueStream",
			Handler:    _TestUtilService_ContinueStream_Handler,
		},
		{
			MethodName: "CheckStreamClosed",
			Handler:    _TestUtilService_CheckStreamClosed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "improbable/grpcweb/test/test.proto",
}

// FailServiceClient is the client API for FailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FailServiceClient interface {
	NonExistant(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type failServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFailServiceClient(cc grpc.ClientConnInterface) FailServiceClient {
	return &failServiceClient{cc}
}

func (c *failServiceClient) NonExistant(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/improbable.grpcweb.test.FailService/NonExistant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FailServiceServer is the server API for FailService service.
type FailServiceServer interface {
	NonExistant(context.Context, *PingRequest) (*PingResponse, error)
}

// UnimplementedFailServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFailServiceServer struct {
}

func (*UnimplementedFailServiceServer) NonExistant(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonExistant not implemented")
}

func RegisterFailServiceServer(s *grpc.Server, srv FailServiceServer) {
	s.RegisterService(&_FailService_serviceDesc, srv)
}

func _FailService_NonExistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FailServiceServer).NonExistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.grpcweb.test.FailService/NonExistant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FailServiceServer).NonExistant(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.grpcweb.test.FailService",
	HandlerType: (*FailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NonExistant",
			Handler:    _FailService_NonExistant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "improbable/grpcweb/test/test.proto",
}
